[{"/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/index.js":"1","/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/App.js":"2","/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/pages/SavedBooks.js":"3","/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/pages/SearchBooks.js":"4","/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/components/Navbar.js":"5","/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/components/SignupForm.js":"6","/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/components/LoginForm.js":"7","/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/utils/auth.js":"8","/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/utils/API.js":"9","/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/utils/mutations.js":"10","/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/utils/localStorage.js":"11"},{"size":266,"mtime":1636906821057,"results":"12","hashOfConfig":"13"},{"size":1387,"mtime":1637183192912,"results":"14","hashOfConfig":"13"},{"size":2947,"mtime":1637435521111,"results":"15","hashOfConfig":"13"},{"size":4647,"mtime":1637181887178,"results":"16","hashOfConfig":"13"},{"size":2524,"mtime":1636906821054,"results":"17","hashOfConfig":"13"},{"size":3271,"mtime":1637182935034,"results":"18","hashOfConfig":"13"},{"size":2713,"mtime":1637182946430,"results":"19","hashOfConfig":"13"},{"size":1234,"mtime":1637183428415,"results":"20","hashOfConfig":"13"},{"size":1392,"mtime":1636906821061,"results":"21","hashOfConfig":"13"},{"size":1058,"mtime":1637171059953,"results":"22","hashOfConfig":"13"},{"size":793,"mtime":1636906821063,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"120w7q7",{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/index.js",[],"/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/App.js",[],"/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/pages/SavedBooks.js",[],"/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/pages/SearchBooks.js",["47","48"],"import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\nimport { useMutation } from '@apollo/client'; \nimport { SAVE_BOOK } from '../utils/mutations'; \n\nconst SearchBooks = () => {\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  const [searchInput, setSearchInput] = useState('');\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n  const [saveBook, { error }] = useMutation(SAVE_BOOK); \n  \n  useEffect(() => {\n    return () => saveBookIds(savedBookIds); \n  })\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      //make a call to Google's API \n      const response = await fetch(\n        `https://www.googleapis.com/books/v1/volumes?q=${searchInput}`\n      ); \n      //if response isn't ok, throw an error\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      //update setSearchedBooks with new data returned from the API call \n      setSearchedBooks(bookData);\n      //reset the input value back to be empty \n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await saveBook({\n        variables: { bookData: { ...bookToSave } }, \n      });\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/components/Navbar.js",[],"/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/components/SignupForm.js",[],"/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/components/LoginForm.js",[],"/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/utils/auth.js",[],"/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/utils/API.js",[],"/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/utils/mutations.js",[],"/Users/amandac0022/Documents/GT Full Stack Program/Homework/book-search/client/src/utils/localStorage.js",[],{"ruleId":"49","severity":1,"message":"50","line":13,"column":22,"nodeType":"51","messageId":"52","endLine":13,"endColumn":27},{"ruleId":"49","severity":1,"message":"53","line":69,"column":15,"nodeType":"51","messageId":"52","endLine":69,"endColumn":19},"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'data' is assigned a value but never used."]